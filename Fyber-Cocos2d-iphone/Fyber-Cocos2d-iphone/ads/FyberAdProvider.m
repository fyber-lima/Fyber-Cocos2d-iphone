//
//  FyberAdProvider.m
//  GSG
//
//  Created by Robert Segal on 2014-09-29.
//  Copyright (c) 2014 Get Set Games. All rights reserved.
//

#import "FyberAdProvider.h"
#import "GSGAdManager.h"
#import "CCDirector.h"

@interface FyberAdProvider()
@property (nonatomic, readwrite, retain) NSMutableDictionary *requests;
@property (nonatomic, assign) BOOL isBackgrounded;
@property (nonatomic, assign) SPBrandEngageClient       *lastClient;
@property (nonatomic, assign) SPBrandEngageClientStatus lastStatus;
@end

@implementation FyberAdProvider

-(id)init
{
    self = [super init];
    
    if (self)
    {
        self.requests  = [NSMutableDictionary dictionaryWithCapacity:1];
        
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(applicationDidEnterBackground:)
                                                     name:UIApplicationDidEnterBackgroundNotification object:nil];
        
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(applicationWillEnterForeground:)
                                                     name:UIApplicationDidBecomeActiveNotification object:nil];
    }
    
    return self;
}

-(void)dealloc
{
    self.client   = nil;
    self.requests = nil;
    
    [super dealloc];
}

-(void)applicationWillEnterForeground:(NSNotification *)n
{
    self.isBackgrounded = NO;
    
    UIWindow *w = [UIApplication sharedApplication].windows[0];
    
    if (w)
    {
        NSNumber *u = (NSNumber *)self.userData;
        EAGLView *v = (EAGLView *)[w viewWithTag:[u intValue]];

        if (v)
        {
            if (self.lastStatus == CLOSE_ABORTED || self.lastStatus == CLOSE_FINISHED)
            {
                [self completeOffer];
            }
        }
    }
}

-(void)applicationDidEnterBackground:(NSNotification *)n
{
    self.isBackgrounded = YES;
}

-(void)initialize
{
    static NSString *token = @"";
    
    if (token.length == 0)
    {
        token = [[SponsorPaySDK startWithAutogeneratedUserForAppId:@"25943"
                                                     securityToken:@"76063af474ced17cc1f52851c4ea586f"] retain];
//        token = [[SponsorPaySDK startWithAutogeneratedUserForAppId:@"27440"//@"25943"
//                                                     securityToken:@"2e0dc10937bdb27d61443acc4a467e68"] retain];//@"76063af474ced17cc1f52851c4ea586f"] retain];
    }
}

-(void)cacheAd
{
    self.client     = [SponsorPaySDK requestBrandEngageOffersNotifyingDelegate:self];
    self.lastClient = self.client;
    
    self.requests[[FyberAdProvider addressAsString:self.client]] = self.delegate;

    ((SPBrandEngageClient *)self.client).shouldShowRewardNotificationOnEngagementCompleted = NO;
    [SponsorPaySDK setShowPayoffNotificationOnVirtualCoinsReceived:NO];
}

-(BOOL)hasCachedAd
{
    return self.areOffersAvailable;
}

-(BOOL)showAd
{
    self.requests[[FyberAdProvider addressAsString:self.client]] = self.delegate;

    [[CCDirector sharedDirector] stopAnimation];
    
    [self.navigationController pushViewController:self.viewController animated:NO];

    return [self.client startWithParentViewController:self.viewController];
}

- (void)virtualCurrencyConnector:(SPVirtualCurrencyServerConnector *)connector
  didReceiveDeltaOfCoinsResponse:(double)deltaOfCoins
                    currencyName:(NSString *)currencyName
             latestTransactionId:(NSString *)transactionId
{
    NSObject     *d        = self.requests[[FyberAdProvider addressAsString:self.client]];
    NSDictionary *userInfo = @{ @"delta" : [NSNumber numberWithDouble:deltaOfCoins] };
    
    if (d)
    {
        [FyberAdProvider safeTargetPerformSelector:d
                                          selector:@selector(adProviderAwardVirtualCurrencyReward:)
                                        withObject:userInfo];
    }
    
    [self.requests removeObjectForKey:[FyberAdProvider addressAsString:self.client]];
    
    [[NSNotificationCenter defaultCenter] postNotificationName:kAdProviderAwardVirtualCurrencyRewardNotification
                                                        object:nil
                                                      userInfo:userInfo];
}

-(void)virtualCurrencyConnector:(SPVirtualCurrencyServerConnector *)vcConnector
                failedWithError:(SPVirtualCurrencyRequestErrorType)error
                      errorCode:(NSString *)errorCode
                   errorMessage:(NSString *)errorMessage
{
    switch (error)
    {
        case ERROR_OTHER:
        case SERVER_RETURNED_ERROR:
        case ERROR_INVALID_RESPONSE_SIGNATURE:
        case ERROR_INVALID_RESPONSE:
        case ERROR_NO_INTERNET_CONNECTION:
            NSLog(@"%@ - %@", errorCode, errorMessage);
            break;
            
        default:
            break;
    }
    
    NSObject *d = self.requests[[FyberAdProvider addressAsString:self.client]];
    
    if (d)
    {
        [FyberAdProvider safeTargetPerformSelector:d
                                          selector:@selector(adProviderAwardVirtualCurrencyRewardFailed:)
                                        withObject:nil];
    }
    
    
    [self.requests removeObjectForKey:self.client];
}

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
         didReceiveOffers:(BOOL)areOffersAvailable
{
    if (areOffersAvailable)
    {
        self.areOffersAvailable = areOffersAvailable;
    }
    
    NSObject *d = self.requests[[FyberAdProvider addressAsString:brandEngageClient]];
    
    if (d)
    {
        [FyberAdProvider safeTargetPerformSelector:d
                                          selector:@selector(adProviderDidCacheAd:)
                                        withObject:@{ @"areOffersAvailable" : [NSNumber numberWithBool:self.areOffersAvailable] }];
    }
}

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
          didChangeStatus:(SPBrandEngageClientStatus)newStatus
{
    self.lastStatus = newStatus;
    
    NSString *clientHash = [FyberAdProvider addressAsString:brandEngageClient];
    NSObject *d          = self.requests[clientHash];
    
    BOOL completed      = NO;
    BOOL completedOffer = NO;
    
    switch (newStatus) {
        case CLOSE_FINISHED:
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                // Fyber suggest waiting 3 seconds after CLOSE_FINISHED has been received from an engagement
                // before requesting currency.
                //
                // http://developer.fyber.com/content/ios/basics/rewarding-the-user/vcs/
                //
                static NSTimeInterval kFyberRequestForCoinsWaitTime = 3.0;
                
                [SponsorPaySDK performSelector:@selector(requestDeltaOfCoinsNotifyingDelegate:) withObject:self afterDelay:kFyberRequestForCoinsWaitTime];
            });

            completedOffer = YES;
            completed      = YES;
            break;
            
        case CLOSE_ABORTED:
        case ERROR:
            completedOffer = NO;
            completed      = YES;
            break;
            
        case STARTED:
        {
            [GSGAdManager   sharedInstance].adInProgress = YES;

            [FyberAdProvider safeTargetPerformSelector:d
                                              selector:@selector(adProviderShowAd:)
                                            withObject:@{ @"status" : [NSNumber numberWithInt:newStatus] }];
            
            break;
        }
            
        default:
            break;
    }
    
    if (completed)
    {
        self.areOffersAvailable = NO;
        self.viewController     = nil;
        
        [self.navigationController popViewControllerAnimated:NO];
        
        if (!self.isBackgrounded)
        {
            if (d)
            {
                [FyberAdProvider safeTargetPerformSelector:d
                                                  selector:@selector(adProviderIsHidden:)
                                                withObject:@{ @"wasOfferCompleted" : [NSNumber numberWithBool:completedOffer],
                                                              @"status"            : [NSNumber numberWithInt:newStatus] }];
            }
            
            [GSGAdManager sharedInstance].adInProgress = NO;
            self.lastStatus = STARTED;
            
            [[CCDirector sharedDirector] startAnimation];
        }
    }
}

-(void)completeOffer
{
    NSString *clientHash = [FyberAdProvider addressAsString:self.lastClient];
    NSObject *d          = self.requests[clientHash];
    
    const BOOL completedOffer = self.lastStatus == CLOSE_FINISHED || self.lastStatus == CLOSE_ABORTED ? YES : NO;
    
    if (d)
    {
        [FyberAdProvider safeTargetPerformSelector:d
                                          selector:@selector(adProviderIsHidden:)
                                        withObject:@{ @"wasOfferCompleted" : [NSNumber numberWithBool:completedOffer],
                                                      @"status"            : [NSNumber numberWithInt:self.lastStatus] }];
    }
    
    [GSGAdManager sharedInstance].adInProgress = NO;
    self.lastStatus = STARTED;
    
    [[CCDirector sharedDirector] startAnimation];
}

-(void)flush
{
    // Flush out any coins that may be sitting on the server.  Used only on first run
    // cases so users can't double dip on rewards.
    //
    [SponsorPaySDK requestDeltaOfCoinsNotifyingDelegate:nil];
}

-(void)clearRequests
{
    // Clear out any active requests which may be running effectively cancelling anything that is running.
    //
    [self.requests removeAllObjects];
}

+(NSString *)addressAsString:(NSObject *)obj
{
    return obj ? [NSString stringWithFormat:@"%p", obj] : @"";
}

+(void)safeTargetPerformSelector:(NSObject *)target selector:(SEL)s withObject:(NSObject *)obj
{
    if (target)
    {
        if ( [target respondsToSelector:s] )
        {
            [target performSelector:s withObject:obj ? obj : nil];
        }
    }
}

@end
